{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","shopping-cart/tests/integration/components/app-header-test.js","shopping-cart/tests/integration/components/available-items-test.js","shopping-cart/tests/integration/components/cart-items-test.js","shopping-cart/tests/lint/app.lint-test.js","shopping-cart/tests/lint/templates.template.lint-test.js","shopping-cart/tests/lint/tests.lint-test.js","shopping-cart/tests/test-helper.js","shopping-cart/tests/unit/adapters/application-test.js","shopping-cart/tests/unit/controllers/index-test.js","shopping-cart/tests/unit/models/product-test.js","shopping-cart/tests/unit/routes/index-test.js","shopping-cart/tests/unit/routes/products-test.js","shopping-cart/tests/unit/transforms/dollars-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"shopping-cart/tests/integration/components/app-header-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | app-header', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Z4Q1sRAw\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[21,\\\"app-header\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3GTSp1mS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"app-header\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"shopping-cart/tests/integration/components/available-items-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | available-items', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      this.set('products', []);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"s4FsU+k5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[27,\\\"available-items\\\",null,[[\\\"products\\\"],[[23,[\\\"products\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'Featured Products'); // Template block usage:\n\n      this.set('products', []);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"6OBSEzw8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"available-items\\\",null,[[\\\"products\\\"],[[23,[\\\"products\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'Featured Products');\n    });\n  });\n});","define(\"shopping-cart/tests/integration/components/cart-items-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | cart-items', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n  });\n});","define(\"shopping-cart/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/app-header.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/app-header.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/available-items.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/available-items.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/cart-items.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/cart-items.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('data/products.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'data/products.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/product.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/product.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/products.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/products.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('transforms/dollars.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/dollars.js should pass ESLint\\n\\n');\n  });\n});","define(\"shopping-cart/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('shopping-cart/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'shopping-cart/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('shopping-cart/templates/components/app-header.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'shopping-cart/templates/components/app-header.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('shopping-cart/templates/components/available-items.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'shopping-cart/templates/components/available-items.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('shopping-cart/templates/components/cart-items.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'shopping-cart/templates/components/cart-items.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('shopping-cart/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'shopping-cart/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('shopping-cart/templates/products.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'shopping-cart/templates/products.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"shopping-cart/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('integration/components/app-header-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/app-header-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/available-items-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/available-items-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/cart-items-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/cart-items-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/product-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/product-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/products-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/products-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/transforms/dollars-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/dollars-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"shopping-cart/tests/test-helper\", [\"shopping-cart/app\", \"shopping-cart/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"shopping-cart/tests/unit/adapters/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"shopping-cart/tests/unit/controllers/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:index');\n      assert.ok(controller);\n    });\n    (0, _qunit.test)('should update showModal toggleModal action', function (assert) {\n      assert.expect(2); // get the controller instance\n\n      let controller = this.owner.lookup('controller:index'); // check the properties before the action is triggered\n\n      assert.equal(controller.get('showModal'), false, 'showModal initialized'); // trigger the action on the controller by using the `send` method,\n      // passing in any params that our action may be expecting\n\n      controller.send('toggleModal', 'true'); // finally we assert that our values have been updated\n      // by triggering our action.\n\n      assert.equal(controller.get('showModal'), 'true', 'showModal updated');\n    });\n    (0, _qunit.test)('should add or remove product from cart ', function (assert) {\n      assert.expect(6); // get the controller instance\n\n      let controller = this.owner.lookup('controller:index'); // check the properties before the action is triggered\n\n      assert.notEqual(controller.get('availableProducts').length, 0, 'Products are available');\n      assert.equal(controller.get('addedProducts').length, 0, 'no products added in cart'); // trigger the action on the controller by using the `send` method,\n      // passing in any params that our action may be expecting\n\n      let intialLength = controller.get('availableProducts').length;\n      controller.send('addOrRemove', controller.get('availableProducts')[2], 'add'); // finally we assert that our values have been updated\n      // by triggering our action.\n\n      assert.equal(controller.get('availableProducts').length, intialLength - 1, 'Products removed from list');\n      assert.equal(controller.get('addedProducts').length, 1, 'products added in cart');\n      controller.send('addOrRemove', controller.get('addedProducts')[0], 'remove'); // finally we assert that our values have been updated\n      // by triggering our action.\n\n      assert.equal(controller.get('availableProducts').length, intialLength, 'Products added back to list');\n      assert.equal(controller.get('addedProducts').length, 0, 'products removed from cart');\n    });\n  });\n});","define(\"shopping-cart/tests/unit/models/product-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | product', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('product', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"shopping-cart/tests/unit/routes/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define(\"shopping-cart/tests/unit/routes/products-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | products', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:products');\n      assert.ok(route);\n    });\n  });\n});","define(\"shopping-cart/tests/unit/transforms/dollars-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Transform | dollars', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let transform = this.owner.lookup('transform:dollars');\n      assert.ok(transform);\n    });\n  });\n});","define('shopping-cart/config/environment', [], function() {\n  var prefix = 'shopping-cart';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('shopping-cart/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}